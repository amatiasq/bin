#!/bin/bash -e

command="$1"

function main() {
  [ "$command" = "r" ] && { echo "Guitarra"; exit 2; } # r con r guitarra

  # if command not empty
  if [ -n "$command" ]; then
    shift
  else
    function at-dir() {
      [ "$(pwd)" = "$1" ] || [ "$(pwd)" = "$(eval echo $1)" ]
    }

    if at-dir "~/yego/web-backoffice"; then
      yego-bo-start
      exit $?
    elif at-dir "~/yego/app-user"; then
      app-start user
      exit $?
    elif at-dir "~/yego/app-ranger"; then
      app-start ranger
      exit $?
    fi

    default-command "$@"
  fi

  run "$@"
}

function default-command() {
  if [ ! -f Makefile ] && [ ! -f package.json ] && [ ! -f deno.json ]; then
    echo "Please give me a command"
    echo "I don't see a Makefile, package.json or deno.json here"
    exit 1
  fi

  function has() {
    grep -q "\"$1\":" package.json 2>/dev/null \
    || grep -q "\"$1\":" deno.json 2>/dev/null \
    || grep -q "$1:" Makefile 2>/dev/null
  }

  if has "dev"; then
    command="dev"
  elif has "start"; then
    command="start"
  elif has "serve"; then
    command="serve"
  fi

  if [ -z "$command" ]; then
    echo "Please give me a command"
    echo "I don't see a dev, start or serve command in package.json, deno.json or Makefile"
    exit 1
  fi
}

function run() {
  if [ -f Makefile ]; then
    make "$command" $@
    exit 0
  fi

  if [ -f bun.lockb ]; then
    use-nvm-rc
    run-js bun $@
    exit 0
  fi

  if [ -f yarn.lock ]; then
    use-nvm-rc
    run-js yarn $@
    exit 0
  fi

  if [ -f package.json ]; then
    use-nvm-rc
    run-js npm $@
    exit 0
  fi

  if [ -f deno.json ]; then
    deno task "$command" $@
    exit 0
  fi

  if [ -f *.csproj ] || [ -f *.fsproj ]; then
    dotnet run "$command" $@
    exit 0
  fi

  if [ -f Cargo.toml ]; then
    cargo watch -x run
    exit 0
  fi

  echo "Could not find project type"
  exit 1

}

function use-nvm-rc() {
  if [ -f .nvmrc ]; then
    source $(brew --prefix nvm)/nvm.sh
    nvm install $(cat .nvmrc)
  fi
}

function run-js() {
  binary="$1"
  shift
  [ -d node_modules ] || "$binary" install
  "$binary" run "$command" -- $@
}

# --- ENTRY POINT ---
main "$@"
