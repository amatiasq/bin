#!/bin/bash -e

N=
PUSH=
START=

function usage() {
  echo "Usage: $0 [-p -d -s <start-delay>] <max-pause = 60> <min-pause = 600>"
  echo "  -d --dry: Won't execute write operations"
  echo '  -p --push: Will push to the remote when done'
  echo '  -s --start: Delay before starting in seconds'
}

while [[ $# -gt 0 ]]; do
  case $1 in
    -p|--push)
      PUSH=1
      echo 'Will push'
      shift
      ;;
    -d|--dry)
      N='echo $'
      echo 'Dry run'
      shift
      ;;
    -s|--start)
      START=$2
      shift
      shift
      ;;
    -h|--help)
      usage
      exit 0
      ;;
    -*|--*)
      echo "Unknown option $1"
      usage
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

MIN_PAUSE_SECS=${2:-60}
MAX_PAUSE_SECS=${1:-600}

echo "Pause between $MIN_PAUSE_SECS and $MAX_PAUSE_SECS"

$N git fetch

BRANCH=$(git branch --show-current)
COMMITS=$(git log --reverse --format="%H" origin/$BRANCH..$BRANCH)

if [ -z "$COMMITS" ]; then
  echo 'No new commits'
  exit 1
fi

for HASH in $COMMITS
do
  echo ''
  git show --no-patch $HASH
done
echo ''

if [ ! -z "$START" ]; then
  $N sleep $START
fi

$N git reset --hard origin/$BRANCH > /dev/null

for HASH in $COMMITS
do
  MESSAGE=$(git show -s --format=%s $HASH)
  PAUSE=$(($MIN_PAUSE_SECS + $RANDOM % ($MAX_PAUSE_SECS - $MIN_PAUSE_SECS + 1)))

  echo "Commiting in $(($PAUSE / 60)) minutes ($PAUSE secs):"
  echo "$HASH $MESSAGE"

  $N sleep $PAUSE

  echo "git cherry-pick $HASH"
  $N git cherry-pick $HASH
  $N git reset --soft HEAD~1
  echo "git commit -m '$MESSAGE'"
  $N git commit -m "$MESSAGE"

  echo ''
done

if [ ! -z "$PUSH" ]; then
  $N git push origin "$BRANCH"
fi
